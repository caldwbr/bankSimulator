// Initialize Three.js
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

// Create a group for the bank structure
const bankGroup = new THREE.Group();
scene.add(bankGroup);

// Create axes manually
const axes = new THREE.Group();

const xAxisMaterial = new THREE.LineBasicMaterial({ color: 0xff0000 }); // Red for x-axis
const yAxisMaterial = new THREE.LineBasicMaterial({ color: 0x00ff00 }); // Green for y-axis
const zAxisMaterial = new THREE.LineBasicMaterial({ color: 0x0000ff }); // Blue for z-axis

const xAxisGeometry = new THREE.Geometry();
xAxisGeometry.vertices.push(new THREE.Vector3(-2, 0, 0), new THREE.Vector3(2, 0, 0));
const xAxis = new THREE.Line(xAxisGeometry, xAxisMaterial);

const yAxisGeometry = new THREE.Geometry();
yAxisGeometry.vertices.push(new THREE.Vector3(0, -2, 0), new THREE.Vector3(0, 2, 0));
const yAxis = new THREE.Line(yAxisGeometry, yAxisMaterial);

const zAxisGeometry = new THREE.Geometry();
zAxisGeometry.vertices.push(new THREE.Vector3(0, 0, -2), new THREE.Vector3(0, 0, 2));
const zAxis = new THREE.Line(zAxisGeometry, zAxisMaterial);

//axes.add(xAxis);
//axes.add(yAxis);
//axes.add(zAxis);

//scene.add(axes);


        // Create a cube
        const cubeGeometry = new THREE.BoxGeometry(1.5, 1.5, 1.5);
        const cubeMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true });
        const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
        scene.add(cube);

        // Create a sphere
        const sphereGeometry = new THREE.SphereGeometry(1.0, 20, 20);
        const sphereMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true });
        const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
sphere.rotation.x = Math.PI/2;
        scene.add(sphere);

       // Create a cylinder (broken glass)
const cylinderGeometry = new THREE.CylinderGeometry(0.4, 0.4, 1.4, 20);
const cylinderMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true });
const cylinder = new THREE.Mesh(cylinderGeometry, cylinderMaterial);
cylinder.position.x = 1.5; // Offset to the right
//cylinder.rotation.z = Math.PI; // Tilted clockwise
cylinder.rotation.x = -Math.PI/2;
cylinder.rotation.z = Math.PI/12;
scene.add(cylinder);

      // Create a cylinder (broken glass)
const legGeometry = new THREE.CylinderGeometry(0.15, 0.4, 3, 10);
const legMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true });
const leg = new THREE.Mesh(legGeometry, legMaterial);
leg.position.x = 1.5; // Offset to the right
//cylinder.rotation.z = Math.PI; // Tilted clockwise
leg.rotation.x = -Math.PI/2;
leg.rotation.z = Math.PI/30;
scene.add(leg);


       // Create a pyramid-like shape (tetrahedron)
        const pyramidGeometry = new THREE.Geometry();
        pyramidGeometry.vertices.push(
            new THREE.Vector3(-1, -1, 0.8),
            new THREE.Vector3(-1, 1, 0.8),
            new THREE.Vector3(1, -1, 0.8),
            new THREE.Vector3(1, 1, 0.8),
            new THREE.Vector3(0, 0, 2)
        );

        pyramidGeometry.faces.push(
            new THREE.Face3(0, 1, 4),
            new THREE.Face3(1, 3, 4),
            new THREE.Face3(3, 2, 4),
            new THREE.Face3(2, 0, 4),
            new THREE.Face3(0, 3, 1),
            new THREE.Face3(2, 3, 0)
        );

        const pyramidMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true });
        const pyramid = new THREE.Mesh(pyramidGeometry, pyramidMaterial);
        pyramid.position.y = 0.75; // Position on top of the cube
        scene.add(pyramid);

// Position the cube and sphere
        cube.position.x = 0;
        cube.position.y = 0;
        cube.position.z = 0;

        sphere.position.x = 0;
        sphere.position.y = 0;
        sphere.position.z = 0;

        cylinder.position.x = 0.25;
        cylinder.position.y = 0;
        cylinder.position.z = 0;

        leg.position.x = 0.1;
        leg.position.y = 0;
        leg.position.z = -.7;

        pyramid.position.x = 0;
        pyramid.position.y = 0;
        pyramid.position.z = 0;

        // Add the cylinder to the bank group
bankGroup.add(cylinder);
bankGroup.add(sphere);
bankGroup.add(cube);
bankGroup.add(pyramid);
bankGroup.add(leg);
//bankGroup.add(axes);

// Position the entire bank structure
bankGroup.position.x = 0;
bankGroup.position.y = 0;
bankGroup.position.z = 0;

        

        // Position the camera
        camera.position.z = 5;

        // Create an animation loop
        const animate = () => {
            requestAnimationFrame(animate);

            // Rotate the cube and sphere
            bankGroup.rotation.x += 0.01;
            bankGroup.rotation.y += 0.01;

            renderer.render(scene, camera);
        };

        // Start the animation loop
        animate();
